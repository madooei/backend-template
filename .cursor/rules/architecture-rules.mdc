---
description: 
globs: 
alwaysApply: true
---
This codebase follows a layered architecture. When implementing new features or updating existing ones, respect the following layers and their boundaries.

## 1. The Model Layer (Zod Schemas & TypeScript Types)

- **Location:** `src/schemas/`
- **Primary Role:** Defines the canonical shape and validation rules for all data structures within the application.
- **Responsibilities:**
    - Define Zod schemas for core domain entities (e.g., `Note`).
    - Define Data Transfer Object (DTO) schemas for request/response bodies (e.g., `CreateNoteDto`, `UpdateNoteDto`).
    - Define schemas for query parameters (e.g., `NoteQueryParams`).
    - Serve as the single source of truth for data validation logic (including type coercion, required fields, enums, and string formats).
    - Enable automatic TypeScript type inference from schemas (`z.infer<typeof schemaName>`).
- **Used By:** All other layers (Controllers, Services, Repositories) for data consistency and validation.
- **Key Principle:** If it concerns data structure, type, or basic validation rules, it belongs here.

## 2. The Data Access Layer (Interfaces and Implementations following the Repository Pattern)

- **Location:** `src/repositories/`
- **Primary Role:** Abstracts all database interactions, providing a clean API for the Service layer to handle data persistence and retrieval.
- **Responsibilities (Repository Interfaces - `src/repositories/`):**
    1. Define the contract (methods, parameters, return types) for data operations on a specific entity (e.g., `INoteRepository`).
    2. Use domain model types (from `src/schemas/`) in their method signatures.
- **Responsibilities (Repository Implementations - e.g., `src/repositories/mockdb/`, `src/repositories/mongodb/`):**
    1. Implement the corresponding repository interface using a specific database technology (e.g., `MockDbNoteRepository`, `MongoDbNoteRepository`).
    2. Contain all database-specific query logic and connection handling (via an injected DB instance or manager like `MongoDbDatabase`).
    3. **Data Mapping:** Map data between the database-specific format (e.g., MongoDB documents with `_id: ObjectId`) and the application's domain models (e.g., `Note` with `id: string`).
    4. **Validate Data Read from DB:** When mapping data *from* the database *to* a domain model (e.g., with a `mapDocumentToEntity` function), use the Zod schema's `.parse()` method. This ensures data integrity and protects against schema drift or database corruption.
    5. **Always Implement Mocks:** Implement an in-memory version of each repository interface as a mock database in `src/repositories/mockdb/`.
- **Does NOT Do:**
    - Contain business logic or business rule validation (this belongs in Services).
    - Perform authorization checks (this belongs in Services).
    - Validate the shape/type of DTOs or domain objects passed *to it* by the Service layer. The repository assumes that data has been validated by higher layers according to business rules.
- **Key Principle:** Repositories act as data access gateways, isolating database concerns and ensuring data conformity to defined models.