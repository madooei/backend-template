import { z } from "zod";
import { queryParamsSchema } from "./shared.schema.ts";

export const noteSchema = z.object({
  id: z.string(), // Primary key for the Note record
  content: z.string(),
  createdBy: z.string(), // User ID (string)
  createdAt: z.date().optional(), // Set by DB/service, present on retrieved entities
  updatedAt: z.date().optional(), // Set by DB/service, present on retrieved entities
});

export type NoteType = z.infer<typeof noteSchema>;

export const createNoteSchema = noteSchema
  .omit({
    id: true, // Will be generated by the service/system
    createdBy: true, // Will be set from authenticated user context in the service
    createdAt: true, // Will be set by the service/database
    updatedAt: true, // Will be set by the service/database
  })
  .extend({
    // Ensure 'content' is explicitly required as it's min(1) in base schema but omit might make it optional
    content: z.string().min(1, "Note content is required for creation."),
  });
export type CreateNoteType = z.infer<typeof createNoteSchema>;

// For updates, 'id' is typically part of the URL, not the body.
// The DTO should only contain fields that can be changed.
export const updateNoteSchema = noteSchema
  .omit({
    id: true,
    createdBy: true,
    createdAt: true,
    updatedAt: true,
  })
  .partial(); // All fields become optional for updates
export type UpdateNoteType = z.infer<typeof updateNoteSchema>;

export const noteQueryParamsSchema = queryParamsSchema.extend({
  createdBy: z.string().optional(),
});
export type NoteQueryParamsType = z.infer<typeof noteQueryParamsSchema>;
